# Traefik DaemonSet Configuration
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: traefik
  labels:
    app: traefik
spec:
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik
      containers:
      - name: traefik
        image: traefik:v2.9
        args:
          - "--api.insecure=true"                 # Enable Traefik's dashboard (use secure configuration for production)
          - "--providers.kubernetescrd"           # Enable Kubernetes CRD provider
          - "--entrypoints.web.address=:80"       # Define entry point for HTTP
          - "--metrics.prometheus=true"           # Enable Prometheus metrics
          - "--ping=true"                         # Enable ping endpoint for health checks
          - "--ping.entrypoint=web"               # Ping endpoint on the 'web' entrypoint (port 80)
        ports:
        - name: http
          containerPort: 80
        - name: admin
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /ping
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /ping
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: traefik
spec:
  type: NodePort
  ports:
  - name: web
    port: 80
    targetPort: http
    nodePort: 30080
  - name: web-admin
    port: 8080
    targetPort: admin
    nodePort: 30081
  selector:
    app: traefik

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-role
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses", "ingressclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["traefik.containo.us"]
    resources:
      - "middlewares"
      - "middlewaretcps"
      - "ingressroutes"
      - "ingressroutetcps"
      - "ingressrouteudps"
      - "traefikservices"
      - "tlsoptions"
      - "tlsstores"
      - "serverstransports"
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-role
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: default

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: websocket
spec:
  headers:
    customRequestHeaders:
      Connection: Upgrade
      Upgrade: websocket

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: whiteboard-route
spec:
  entryPoints:
    - web
  routes:
    - match: PathPrefix(`/ws`)
      kind: Rule
      services:
        - name: whiteboard
          port: 3000
      middlewares:
        - name: websocket

# Whiteboard Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whiteboard
  labels:
    app: whiteboard
spec:
  replicas: 4
  selector:
    matchLabels:
      app: whiteboard
  template:
    metadata:
      labels:
        app: whiteboard
    spec:
      containers:
      - name: whiteboard
        image: dimast0/whiteboard:v8
        ports:
        - name: websocket
          containerPort: 3000
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: websocket
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: whiteboard
  labels:
    app: whiteboard
spec:
  ports:
  - name: websocket
    port: 3000
    targetPort: websocket
  selector:
    app: whiteboard

# Horizontal Pod Autoscaler for Whiteboard
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: whiteboard-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: whiteboard
  minReplicas: 2
  maxReplicas: 20
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60 # Descale if the load decreased below limit in the last 60 seconds.
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50 # Scale if avg CPU use > 50%
