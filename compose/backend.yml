version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - int_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - int_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: securepassword
      POSTGRES_DB: app_database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - int_network

  whiteboard:
    image: dimast0/whiteboard:v1
    # build:
    #   context: ../
    depends_on:
      - redis
      - postgres
    networks:
      - int_network
    expose:
      - "9100"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whiteboard.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.whiteboard.entrypoints=web"
      - "traefik.http.services.whiteboard.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.websocket.headers.customRequestHeaders.Upgrade=websocket"
      - "traefik.http.middlewares.websocket.headers.customRequestHeaders.Connection=Upgrade"
    deploy:
      replicas: 3

volumes:
  redis_data:
  postgres_data:

networks:
  int_network:
    driver: overlay
    attachable: true
